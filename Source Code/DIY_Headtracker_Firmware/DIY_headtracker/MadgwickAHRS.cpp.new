//=====================================================================================================
// MadgwickAHRS.c
//=====================================================================================================
//
// Implementation of Madgwick's IMU and AHRS algorithms.
// See: http://www.x-io.co.uk/node/8#open_source_ahrs_and_imu_algorithms
//
// Date			Author          Notes
// 29/09/2011	SOH Madgwick    Initial release
// 02/10/2011	SOH Madgwick	Optimised for reduced CPU load
// 19/02/2012	SOH Madgwick	Magnetometer measurement is normalised
//
//=====================================================================================================

//---------------------------------------------------------------------------------------------------
// Header files

#include "MadgwickAHRS.h"
#include <math.h>

void IMU_MADGWICK::init(float sampleFreq,float betaGain)
{
	beta = betaGain;
	sampleFrequency = sampleFreq;
	quaternion.q0 = 1.0f;
	quaternion.q1 = 0.0f;
	quaternion.q2 = 0.0f;
	quaternion.q3 = 0.0f;
	/*
	recipNorm = 0.0f;

	s0 = 0.0f;
	s1 = 0.0f;
	s2 = 0.0f;
	s3 = 0.0f;

	qDot1 = 0.0f;
	qDot2 = 0.0f;
	qDot3 = 0.0f;
	qDot4 = 0.0f;

	hx = 0.0f;
	hy = 0.0f;

	_2q0mx = 0.0f;
	_2q0my = 0.0f;
	_2q0mz = 0.0f;
	_2q1mx = 0.0f;
	_2bx = 0.0f;
	_2bz = 0.0f;
	_4bx = 0.0f;
	_4bz = 0.0f;
	_2q0 = 0.0f;
	_2q1 = 0.0f;
	_2q2 = 0.0f;
	_2q3 = 0.0f;
	_2q0q2 = 0.0f;
	_2q2q3 = 0.0f;
	q0q0 = 0.0f;
	q0q1 = 0.0f;
	q0q2 = 0.0f;
	q0q3 = 0.0f;
	q1q1 = 0.0f;
	q1q2 = 0.0f;
	q1q3 = 0.0f;
	q2q2 = 0.0f;
	q2q3 = 0.0f;
	q3q3 = 0.0f;*/
}


//---------------------------------------------------------------------------------------------------
// Definitions

//#define sampleFreq	100.0f		// sample frequency in Hz
//#define betaDef		1.0f	  	// 2 * proportional gain Ron: So far 0.4 yields the best results (peaks of 3 degrees off, no drift)

//---------------------------------------------------------------------------------------------------
// Variable definitions

//volatile float beta = betaDef;								// 2 * proportional gain (Kp)
//volatile floatquaternion.q0 = 1.0f,quaternion.q1 = 0.0f,quaternion.q2 = 0.0f,quaternion.q3 = 0.0f;	// quaternion of sensor frame relative to auxiliary frame

//---------------------------------------------------------------------------------------------------
// Function declarations



//====================================================================================================
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

Quaternion IMU_MADGWICK::MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz)
{
	float recipNorm = 0.0f;

	float s0 = 0.0f;
	float s1 = 0.0f;
	float s2 = 0.0f;
	float s3 = 0.0f;

	float qDot1 = 0.0f;
	float qDot2 = 0.0f;
	float qDot3 = 0.0f;
	float qDot4 = 0.0f;

	float hx = 0.0f;
	float hy = 0.0f;

	float _2q0mx = 0.0f;
	float _2q0my = 0.0f;
	float _2q0mz = 0.0f;
	float _2q1mx = 0.0f;
	float _2bx = 0.0f;
	float _2bz = 0.0f;
	float _4bx = 0.0f;
	float _4bz = 0.0f;
	float _2q0 = 0.0f;
	float _2q1 = 0.0f;
	float _2q2 = 0.0f;
	float _2q3 = 0.0f;
	float _2q0q2 = 0.0f;
	float _2q2q3 = 0.0f;
	float q0q0 = 0.0f;
	float q0q1 = 0.0f;
	float q0q2 = 0.0f;
	float q0q3 = 0.0f;
	float q1q1 = 0.0f;
	float q1q2 = 0.0f;
	float q1q3 = 0.0f;
	float q2q2 = 0.0f;
	float q2q3 = 0.0f;
	float q3q3 = 0.0f;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-quaternion.q1 * gx - quaternion.q2 * gy - quaternion.q3 * gz);
	qDot2 = 0.5f * (quaternion.q0 * gx + quaternion.q2 * gz - quaternion.q3 * gy);
	qDot3 = 0.5f * (quaternion.q0 * gy - quaternion.q1 * gz + quaternion.q3 * gx);
	qDot4 = 0.5f * (quaternion.q0 * gz + quaternion.q1 * gy - quaternion.q2 * gx);

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {

		// Normalise accelerometer measurement
		recipNorm = invSqrt2(ax * ax + ay * ay + az * az);
		ax *= recipNorm;
		ay *= recipNorm;
		az *= recipNorm;   

		// Normalise magnetometer measurement
		recipNorm = invSqrt2(mx * mx + my * my + mz * mz);
		mx *= recipNorm;
		my *= recipNorm;
		mz *= recipNorm;

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * quaternion.q0 * mx;
		_2q0my = 2.0f * quaternion.q0 * my;
		_2q0mz = 2.0f * quaternion.q0 * mz;
		_2q1mx = 2.0f * quaternion.q1 * mx;
		_2q0 = 2.0f * quaternion.q0;
		_2q1 = 2.0f * quaternion.q1;
		_2q2 = 2.0f * quaternion.q2;
		_2q3 = 2.0f * quaternion.q3;
		_2q0q2 = 2.0f * quaternion.q0 * quaternion.q2;
		_2q2q3 = 2.0f * quaternion.q2 * quaternion.q3;
		q0q0 = quaternion.q0 * quaternion.q0;
		q0q1 = quaternion.q0 * quaternion.q1;
		q0q2 = quaternion.q0 * quaternion.q2;
		q0q3 = quaternion.q0 * quaternion.q3;
		q1q1 = quaternion.q1 * quaternion.q1;
		q1q2 = quaternion.q1 * quaternion.q2;
		q1q3 = quaternion.q1 * quaternion.q3;
		q2q2 = quaternion.q2 * quaternion.q2;
		q2q3 = quaternion.q2 * quaternion.q3;
		q3q3 = quaternion.q3 * quaternion.q3;

		//digitalRead(PJ1);
		//delayMicroseconds(1);
	
		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * quaternion.q3 + _2q0mz * quaternion.q2 + mx * q1q1 + _2q1 * my * quaternion.q2 + _2q1 * mz * quaternion.q3 - mx * q2q2 - mx * q3q3;
		hy = _2q0mx * quaternion.q3 + my * q0q0 - _2q0mz * quaternion.q1 + _2q1mx * quaternion.q2 - my * q1q1 + my * q2q2 + _2q2 * mz * quaternion.q3 - my * q3q3;
		_2bx = sqrt(hx * hx + hy * hy);
		_2bz = -_2q0mx * quaternion.q2 + _2q0my * quaternion.q1 + mz * q0q0 + _2q1mx * quaternion.q3 - mz * q1q1 + _2q2 * my * quaternion.q3 - mz * q2q2 + mz * q3q3;
		_4bx = 2.0f * _2bx;
		_4bz = 2.0f * _2bz;

		/*Optimized by Rob Tillaart*/
		float c1 = (2.0f * q1q3 - _2q0q2 - ax);
		float c2 = (2.0f * q0q1 + _2q2q3 - ay);
		float c3 = (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx);
		float c4 =  (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my);
		float c5 = (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
		float c6 = (1 - 2.0f * q1q1 - 2.0f * q2q2 - az);

		s0 = -_2q2 * c1 + _2q1 * c2 - _2bz * quaternion.q2 * c3 + (-_2bx * quaternion.q3 + _2bz * quaternion.q1) * c4 + _2bx * quaternion.q2 * c5;
		s1 = _2q3 * c1 + _2q0 * c2 - 4.0f * quaternion.q1 * c6 + _2bz * quaternion.q3 * c3 + (_2bx *quaternion.q2 + _2bz * quaternion.q0) * c4 + (_2bx * quaternion.q3 - _4bz * quaternion.q1) * c5;
		s2 = -_2q0 * c1 + _2q3 * c2 - 4.0f *quaternion.q2 * c6 + (-_4bx *quaternion.q2 - _2bz * quaternion.q0) * c3 + (_2bx * quaternion.q1 + _2bz * quaternion.q3) * c4 + (_2bx * quaternion.q0 - _4bz *quaternion.q2) * c5;
		s3 = _2q1 * c1 + _2q2 * c2 + (-_4bx *quaternion.q3 + _2bz * quaternion.q1) * c3 + (-_2bx * quaternion.q0 + _2bz *quaternion.q2) * c4 + _2bx * quaternion.q1 * c5;

		// Gradient decent algorithm corrective step
		//s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * quaternion.q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * quaternion.q3 + _2bz * quaternion.q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * quaternion.q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
		//s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * quaternion.q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * quaternion.q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx *quaternion.q2 + _2bz * quaternion.q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * quaternion.q3 - _4bz * quaternion.q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
		//s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f *quaternion.q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx *quaternion.q2 - _2bz * quaternion.q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * quaternion.q1 + _2bz * quaternion.q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * quaternion.q0 - _4bz *quaternion.q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
		//s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx *quaternion.q3 + _2bz * quaternion.q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * quaternion.q0 + _2bz *quaternion.q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * quaternion.q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);

		recipNorm = invSqrt2(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
		s0 *= recipNorm;
		s1 *= recipNorm;
		s2 *= recipNorm;
		s3 *= recipNorm;
		
		// Apply feedback step
		qDot1 -= beta * s0;
		qDot2 -= beta * s1;
		qDot3 -= beta * s2;
		qDot4 -= beta * s3;
	}

	// Integrate rate of change of quaternion to yield quaternion
	quaternion.q0 += qDot1 * (1.0f / sampleFrequency);
	quaternion.q1 += qDot2 * (1.0f / sampleFrequency); // Todo: extract common product
	quaternion.q2 += qDot3 * (1.0f / sampleFrequency);
	quaternion.q3 += qDot4 * (1.0f / sampleFrequency);

	// Normalise quaternion
	recipNorm = invSqrt2(quaternion.q0 * quaternion.q0 + quaternion.q1 * quaternion.q1 + quaternion.q2 * quaternion.q2 + quaternion.q3 * quaternion.q3);
	quaternion.q0 *= recipNorm;
	quaternion.q1 *= recipNorm;
	quaternion.q2 *= recipNorm;
	quaternion.q3 *= recipNorm;

	return quaternion;
}

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

Quaternion IMU_MADGWICK::MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
	float recipNorm;
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-quaternion.q1 * gx -quaternion.q2 * gy -quaternion.q3 * gz);
	qDot2 = 0.5f * (quaternion.q0 * gx +quaternion.q2 * gz -quaternion.q3 * gy);
	qDot3 = 0.5f * (quaternion.q0 * gy -quaternion.q1 * gz +quaternion.q3 * gx);
	qDot4 = 0.5f * (quaternion.q0 * gz +quaternion.q1 * gy -quaternion.q2 * gx);

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {

		// Normalise accelerometer measurement
		recipNorm = invSqrt2(ax * ax + ay * ay + az * az);
		ax *= recipNorm;
		ay *= recipNorm;
		az *= recipNorm;   

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f *quaternion.q0;
		_2q1 = 2.0f *quaternion.q1;
		_2q2 = 2.0f *quaternion.q2;
		_2q3 = 2.0f *quaternion.q3;
		_4q0 = 4.0f *quaternion.q0;
		_4q1 = 4.0f *quaternion.q1;
		_4q2 = 4.0f *quaternion.q2;
		_8q1 = 8.0f *quaternion.q1;
		_8q2 = 8.0f *quaternion.q2;
		q0q0 =quaternion.q0 *quaternion.q0;
		q1q1 =quaternion.q1 *quaternion.q1;
		q2q2 =quaternion.q2 *quaternion.q2;
		q3q3 =quaternion.q3 *quaternion.q3;

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 *quaternion.q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
		s2 = 4.0f * q0q0 *quaternion.q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
		s3 = 4.0f * q1q1 *quaternion.q3 - _2q1 * ax + 4.0f * q2q2 *quaternion.q3 - _2q2 * ay;
		recipNorm = invSqrt2(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
		s0 *= recipNorm;
		s1 *= recipNorm;
		s2 *= recipNorm;
		s3 *= recipNorm;

		// Apply feedback step
		qDot1 -= beta * s0;
		qDot2 -= beta * s1;
		qDot3 -= beta * s2;
		qDot4 -= beta * s3;
	}

	// Integrate rate of change of quaternion to yield quaternion
	quaternion.q0 += qDot1 * (1.0f / sampleFrequency);
	quaternion.q1 += qDot2 * (1.0f / sampleFrequency);
	quaternion.q2 += qDot3 * (1.0f / sampleFrequency);
	quaternion.q3 += qDot4 * (1.0f / sampleFrequency);

	// Normalise quaternion
	recipNorm = invSqrt2(quaternion.q0 *quaternion.q0 +quaternion.q1 *quaternion.q1 +quaternion.q2 *quaternion.q2 +quaternion.q3 *quaternion.q3);
	quaternion.q0 *= recipNorm;
	quaternion.q1 *= recipNorm;
	quaternion.q2 *= recipNorm;
	quaternion.q3 *= recipNorm;

	return quaternion;
}

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float IMU_MADGWICK::invSqrt2(float x) {
	//Original
	float halfx = 0.5f * x;
	float y = x;
	long i = *(long*)&y;
	i = 0x5f3759df - (i>>1);
	y = *(float*)&i;
	y = y * (1.5f - (halfx * y * y));
	return y;
}

//====================================================================================================
// END OF CODE
//====================================================================================================
